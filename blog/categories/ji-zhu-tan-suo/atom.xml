<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[分类：技术探索 | YangYang’s Blog]]></title>
  <link href="http://yangyangonline.github.io/blog/categories/ji-zhu-tan-suo/atom.xml" rel="self"/>
  <link href="http://yangyangonline.github.io/"/>
  <updated>2014-12-31T14:37:18+08:00</updated>
  <id>http://yangyangonline.github.io/</id>
  <author>
    <name><![CDATA[杨扬]]></name>
    <email><![CDATA[yangyang0902@foxmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Markdown入门指南]]></title>
    <link href="http://yangyangonline.github.io/blog/markdownru-men-zhi-nan.html"/>
    <updated>2014-12-18T15:18:31+08:00</updated>
    <id>http://yangyangonline.github.io/blog/markdownru-men-zhi-nan</id>
    <content type="html"><![CDATA[<h2 id="section">目录</h2>
<ol>
  <li>什么是 Markdown</li>
  <li>为什么需要 Markdown</li>
  <li>
    <p>如何掌握 Markdown  </p>

    <ul>
      <li>
        <p>Markdown 基本语法（Basic Markdown）</p>
      </li>
      <li>
        <p>Markdown 扩展语法（GitHub Flavored Markdown）</p>
      </li>
      <li>
        <p>Markdown 高级用法</p>
      </li>
    </ul>
  </li>
  <li>Markdown 相关资源</li>
</ol>

<!--more-->

<h2 id="markdown">什么是 Markdown</h2>

<p>Markdown 是一种适用于网络书写的轻量级「标记语言」</p>

<p>Markdown 理念是能让文档更容易读、写和随意改。</p>

<p>Markdown 以纯文本发布，用简洁的语法代替排版。</p>

<p>下面是一段 Markdown 示例：</p>

<pre><code> # Why *you* should use Markdown to write your next blog post

 [Markdown][1] is just so dang legible, it will make your *whole life* easier. **I promise.**

 [1]: http://daringfireball.net/projects/markdown/basics
</code></pre>

<p>相比较，对应的 HTML Markup 语言是这样的：</p>

<pre><code> &lt;h1&gt;Why &lt;em&gt;you&lt;/em&gt; should use Markdown to write your next blog post&lt;/h1&gt;

 &lt;p&gt;&lt;a href="http://daringfireball.net/projects/markdown/"&gt;Markdown&lt;/a&gt;
 is just so dang legible, it will make your &lt;em&gt;whole life&lt;/em&gt; easier. &lt;strong&gt;I promise.&lt;/strong&gt;
 &lt;/p&gt;
</code></pre>

<p>怎么样，是不是感觉 Markdown 语言读、写起来都更清爽呢:-)</p>

<h2 id="markdown-1">为什么需要 Markdown</h2>
<p>###Markdown 优点
纯文本，所以兼容性极强，可以用所有文本编辑器打开。</p>

<p>Markdown 的标记语法有极好的可读性。</p>

<p>让你专注于文字而不是排版。</p>

<p>格式转换方便，Markdown 的文本你可以轻松转换为 html、电子书等。</p>

<h3 id="markdown-2">谁在使用 Markdown</h3>
<p>Markdown 诞生于互联网时代，更是由深谙互联网文本之道的 John Gruber 等人设计。因为 Ruby 与 Github 圈的极客们的热捧，以及来自 Github、Stackoverflow 等网站的大力支持（Github 和 Stackoverflow 的 Issues, comments, pull request descriptions and READMEs 都支持 Markdown 语法）。从一开始，就建立一个完整的生态链。</p>

<p>一切就这么简单。Markdown之所以在被鼓吹之后，越来越流行，不是因为它复杂，而是因为它足够简单。</p>

<h3 id="markdown-3">如何掌握 Markdown</h3>
<p>Markdown 的语法十分简单。常用的标记符号不超过十个，5分钟即可掌握。应该是为数不多，你真的可以彻底学会的语言。</p>

<h3 id="markdown-">基本 Markdown 语法</h3>
<p>####1. 标题
	# 一级标题
 	## 二级标题
 	### 三级标题
 	#### 四级标题
 	##### 五级标题
	###### 六级标题</p>

<h3 id="section-1">2. 列表</h3>

<pre><code> - 无序列表1
 - 无序列表2
 - 无序列表3

 1. 有序列表1
 2. 有序列表2
 3. 有序列表3
</code></pre>

<h3 id="section-2">3. 引用</h3>

<pre><code>&gt; 这个是引用
&gt; 是不是和电子邮件中的
&gt; 引用格式很像
</code></pre>

<h3 id="section-3">4. 粗体与斜体</h3>

<pre><code> **这个是粗体**
 *这个是斜体*
</code></pre>

<h3 id="section-4">5. 图片与链接</h3>
<p>####插入图片</p>

<pre><code>![baidu logo](http://www.baidu.com/img/bdlogo.png)
</code></pre>

<h4 id="section-5">插入链接</h4>

<pre><code>[baidu](http://www.baidu.com/)
</code></pre>

<h4 id="section-6">图片链接</h4>

<pre><code>[![][jane-eyre-pic]][jane-eyre-douban]

[jane-eyre-pic]: http://img3.douban.com/mpic/s1108264.jpg
[jane-eyre-douban]: http://book.douban.com/subject/1141406/
</code></pre>

<h4 id="section-7">6. 代码</h4>

<p>用TAB键起始的段落，会被认为是代码块</p>

<pre><code>&lt;php&gt;
     echo “hello world";
&lt;/php&gt;
</code></pre>

<p>如果在一个行内需要引用代码，只要用反引号`引起来就好</p>

<pre><code> Use the `printf()` function.
</code></pre>

<h3 id="section-8">7. 分割线</h3>

<p>可以在一行中用三个以上的星号、减号、底线来建立一个分隔线</p>

<pre><code> ---
</code></pre>

<p>注：更详细的 Markdown 基本语法，请参考<a href="http://wowubuntu.com/markdown/">Markdown中文版语法说明</a></p>

<h2 id="markdown-github">扩展 Markdown 语法（github扩展语法）</h2>

<h3 id="section-9">1. 删除线</h3>

<pre><code> ~~Mistaken text.~~
</code></pre>

<h3 id="section-10">2. 代码块与语法高亮</h3>

<p><code>ruby
 require 'redcarpet'
 markdown = Redcarpet.new("Hello World!")
 puts markdown.to_html
</code></p>

<h3 id="section-11">3. 表格</h3>

<pre><code>| Tables        | Are           | Cool  |
| ------------- |:-------------:| -----:|
| col 3 is      | right-aligned | $1600 |
| col 2 is      | centered      |   $12 |
| zebra stripes | are neat      |    $1 |
</code></pre>

<h3 id="section-12">4. 任务列表</h3>

<pre><code>- [x] @mentions, #refs, [links](), **formatting**, and &lt;del&gt;tags&lt;/del&gt; are supported
- [x] list syntax is required (any unordered or ordered list supported)
- [x] this is a complete item
- [ ] this is an incomplete item
</code></pre>

<p><strong>注1</strong>：更详细的 Markdown 扩展语法，请参考<a href="https://help.github.com/articles/github-flavored-markdown/">GFM（Github Flavored Markdown)</a></p>

<p><strong>注2</strong>：GFM扩展语法并非所有的 Markdown 编辑器都支持。</p>

<h2 id="section-13">其他高级用法</h2>

<h3 id="cross-reference-named-anchor-in-markdown">Cross-reference (named anchor) in markdown</h3>

<pre><code>Take me to [pookie](#pookie)

 &lt;a name="pookie"&gt;&lt;/a&gt;
</code></pre>

<p>参考这里（http://stackoverflow.com/questions/5319754/cross-reference-named-anchor-in-markdown）</p>

<h3 id="section-14">引用代码块中包含反引号</h3>

<p>只需使用比代码块中反引号更多的连续反引号来实现
例如：引用 Markdown 代码区段：</p>

<pre><code> ````
 ```
 print($abc, `abc`, ``ab``);

 ```
 ````
</code></pre>

<h2 id="markdown--1">Markdown 相关资源</h2>
<ul>
  <li>
    <p>Markdown 作者之一<a href="http://coolshell.cn/articles/11928.html">Aaron Swartz</a></p>
  </li>
  <li>
    <p>Markdown 写作网站<a href="http://www.jianshu.com/">简书</a>上图文并茂的<a href="http://www.jianshu.com/p/q81RER">新手指引</a>和<a href="http://www.jianshu.com/p/1e402922ee32/">入门指南</a></p>
  </li>
  <li>另一个不错的 Markdown 写作网站<a href="http://markable.in/">Markable</a>,可以同步到EverNote</li>
  <li>对于需要书写公式的科技工作者，可以参考这篇<a href="http://www.jianshu.com/p/PpDNMG">Markdown写作浅谈</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress+GitHub建立独立静态博客]]></title>
    <link href="http://yangyangonline.github.io/blog/octopress-plus-githubjian-li-du-li-jing-tai-bo-ke.html"/>
    <updated>2014-12-17T20:11:41+08:00</updated>
    <id>http://yangyangonline.github.io/blog/octopress-plus-githubjian-li-du-li-jing-tai-bo-ke</id>
    <content type="html"><![CDATA[<h2 id="octopressgithub-pages">1.为什么选择Octopress和GitHub Pages?</h2>
<p>在在做任何事情之前最好先问个为什么，尽管很多情况下未必有答案，但这个做法绝对有好处。用 Octopress 搭建博客，并托管到 Github Pages，撇除一些个人因素之外，我想还有以下几点原因：</p>

<!--more-->

<ol>
  <li>
    <p>免费且独立。把 Octopress 博客系统搭建到 Github Pages 虽是免费，但不失独立性，即便 Github 全站关闭，你也将有一份本地全站备份，随时可以重新恢复。不必受托管商之气，而且还免费，如果你愿意，甚至可以自行插入广告挣钱。</p>
  </li>
  <li>
    <p>版本控制。写文章，建网站，做软件都需要修改，但有时候改完了又会后悔，如果有时光机就好了，Git 就是你的时光机。当然如果你不想了解这些看上去很唬人的 IT 名词，只是想写博客的话，请在需要的时候再研究这条的内容。</p>
  </li>
  <li>
    <p>相对其他托管到 Github 上的博客程序，Octopress 更加成熟易上手。打个比方，Jekyll 可以说是毛坯房，Hexo 和 Octopress 算是简装修，但相比 Hexo，Octopress 有更多装修范例和更多熟练的装修工人，更容易获取帮助。当然如果你只想住精装修的房子，那不得不花点钱上 WordPress 了。</p>
  </li>
  <li>
    <p>使用 Markdown。Markdown 是现在最为流行的轻量级标记语言，也是已故的天才 Aaron Swartz 留给世人最好的礼物，窃以为每个在互联网上发布文章的人都该掌握。</p>
  </li>
  <li>
    <p>按照官方的说法，Octopress 是个「为黑客设计的博客框架」，这很酷，你不觉得吗？</p>
  </li>
</ol>

<p>如果你之前没有写过博客，打算开始搭建自己第一个博客的话，其实也不妨试试 Octopress，免费还能学到东西，何乐而不为？</p>

<h2 id="section">2.准备工作</h2>
<p>既然是为黑客设计的博客框架，安装起来肯定没有像普通应用程序那么简单，需要一些准备工作，但请相信我，并不复杂。</p>

<h3 id="git">2.1 安装git</h3>

<p>既然要使用 Github，那么肯定首先要安装 Git，这个很简单：</p>

<ol>
  <li><a href="http://git-scm.com/">点击这里</a>到 Git 官方网站。</li>
  <li>找到对应你的系统的版本下载链接，按照提示下载并安装。</li>
</ol>

<h3 id="ruby">2.2 安装Ruby</h3>

<p>安装 Ruby 稍稍有些复杂，不过你只要按照以下步骤一步一步来就好了：</p>

<ol>
  <li>安装HomeBrew</li>
</ol>

 	<a href="http://brew.sh/index_zh-cn.html">HomeBrew</a> 是一个非常有用的软件包管理系统，你可以把它想象成一个稍微抽象一点的 Mac App Store. 正如我们用 Mac App Store 来安装其他软件一样，我们这一步安装 HomeBrew 的目的是为了安装别的软件 (Ruby) 。当然 Mac App Store 和 HomeBrew 本身也是软件。
 	安装 HomeBrew 非常简单，打开终端 (Terminal)，执行以下命令（所谓「执行」即「输入+回车」，下同）：

<pre><code>ruby -e "$(curl -fsSL https://raw.github.com/Homebrew/homebrew/go/install)	
</code></pre>

<p>如果在执行上如命令的时候弹出需要安装 Xcode Command Line Tool 的提示，直接点击安装即可。</p>

<p><strong>注意：安装后可能还不能装好，你可以输入以下命令行检查是否装好，若重新提醒你安装，则说明未安装好，那么你最好就直接Google一个这个工具，单独下载dmg文件，并安装。</strong></p>

<pre><code>xcode-select --install
</code></pre>

<p>成功则显示：</p>

<pre><code>xcode-select: error: command line tools are already installed, use "Software Update" to install updates
</code></pre>

<p>安装好Xcode Command Line Tool 后最好先执行以下命令：</p>

<pre><code>brew doctor
</code></pre>

<p>此条命令用来诊断安装中出现的问题并提示修复方法，如果没有问题则会显示：</p>

<pre><code>Your system is ready to brew.
</code></pre>

<p>如遇问题，则按照提示处理，如果不懂如何处理可以先试着执行后面的步骤，如果能成功，则没有太大问题，毕竟我们只是想写博客而已。当然，做任何事情之前，备份是必须的。</p>

<ol>
  <li>使用 RVM 安装 Ruby</li>
</ol>

<p>执行以下命令安装 RVM，最新的稳定版 Ruby 也会随之安装：</p>

<pre><code>curl -L https://get.rvm.io | bash -s stable --ruby
</code></pre>

<p>为避免出现问题，可执行以下命令安装 Ruby 2.0.0:</p>

<pre><code>rvm install 2.0.0
rvm use 2.0.0
rvm rubygems latest
</code></pre>

<p>可以执行ruby –version命令来查看现在使用的 Ruby 版本，确保正在使用的是 Ruby 2.0.0</p>

<h3 id="github">2.3 注册Github账号</h3>

<p>这个没什么好说的，早晚需要，去 http://github.com 注册吧。</p>

<h3 id="section-1">2.4 域名指向（可选）</h3>

<p>如果你有自己的域名可用，可以在这时就配置好，毕竟解析起来需要一段时间，不如在我们搭建博客的时候让它开始，这样我们搭建完成后，基本上就可以直接用自有域名访问了。</p>

<p>如果你用的是顶级域名，比如 yangyang.com, 请创建两个 A 记录 (A Record) 分别指向 192.30.252.153 和 192.30.252.154.</p>

<p>如果你使用二级域名，比如 blog.shengmingzhiqing.com, 请将该域名的 CNAME 指向 [your_username].github.io, 把其中的 [your_username]换成你自己在 Github 上的用户名。</p>

<p>如果你暂时没有域名，这一步可以暂时不用管。</p>

<h2 id="octopress">3.本地安装 Octopress</h2>

<p>终于进入正题了。有了前面的准备工作，安装 Octopress 显得非常简单：</p>

<p>首先，打开终端 (Terminal) 执行如下命令：</p>

<pre><code>git clone git://github.com/imathis/octopress.git octopress
cd octopress
</code></pre>

<p>上面的代码中，第一行的作用是把 Octopress 克隆到本地磁盘，将会在你的本地~/user/yourusername 这个文件夹下生成一个名为 octopress 的文件夹。如果你不知道 yourusername 是什么，其实就是你每次打开终端时，$ 这个符号前面显示的那玩意。</p>

<p>第二行的作用是进入这个新建的 octopress 文件夹。这一步可能会碰到一个「是否要信任 .rvmrc file」的问题，输入 yes.</p>

<p>然后我们开始安装 Octopress 所必需的依赖项(dependencies)，执行以下命令：</p>

<pre><code>gem install bundler
</code></pre>

<p>在下一步之前</p>

<p>1）修改gemfile</p>

<p>由于大陆的“特殊情况”，rails默认生成的Gemfile的源 https://rubygems.org 很慢甚至被重置，所以适应国情，要修改下Rails默认生成的Gemfile文件。</p>

<p>修改octopress文件夹里的Gemfile文件，替换 https://rubygems.org 为 http://ruby.taobao.org </p>

<p>执行：</p>

<pre><code>gem install jekyll --version “2.0.0"
</code></pre>

<p>完毕后		</p>

<pre><code>bundle install
</code></pre>

<p>然后执行如下命令安装默认主题：</p>

<pre><code>rake install
</code></pre>

<p>本地安装完毕。顺便说一句，所谓 rake 就是 ruby make 的缩写。</p>

<p>这时你执行如下命令：</p>

<pre><code>rake preview
</code></pre>

<p>然后在浏览器内输入 http://localhost:4000/，即可看到我们搭建完成的博客。也许并不好看，但很令人开心，不是么？</p>

<p><strong>注意：以上各步中如果出现权限问题（关键词 permission），无法完成（关键词 abort）的话，请在各命令前加上 sudo+空格，如有提示，请输入电脑登录密码。</strong>	</p>

<h2 id="octopress--github-pages">4.将 Octopress 部署到 Github Pages</h2>

<h3 id="repository">4.1 新建库 (Repository)</h3>

<p>用刚刚注册的 Github 账号登录，然后在点击页面右上角的加号，在弹出菜单中点击 New Repository: 如图所示
<img src="Repository.png" alt="权限选择" /></p>

<p>然后会跳转到一个新建库 (Create new repository) 的页面，在Repository name一栏填 [your_username].github.io，[your_username] 是你 Github 上的用户名，请务必按照此格式填写，否则无法在 Github 上部署博客。然后点击 Create repository 按钮提交。</p>

<p>如果一切顺利会出现一个页面，有一个 SSH 地址，形如 git@github.com:[your_username]/[your_username].github.io.git，下一步会用到。</p>

<h3 id="octopress--github-pages-1">4.2 将本地部署的 Octopress 发布到 Github Pages</h3>

<p>打开终端 (Terminal)，执行以下命令：</p>

<pre><code>cd octopress
rake setup_github_pages
</code></pre>

<p>然后会出现一个问句，请把 4.1 步生成的 SSH 地址粘贴到这里，然后回车继续。</p>

<p>执行以下命令：</p>

<pre><code>rake generate
rake deploy
</code></pre>

<p>第一行命令用来生成页面，第二行命令用来部署页面，可按照字面意思理解。如果理解不了，可以暂且不管。任何一步如果出现失败提示，请使用 sudo。</p>

<p>如果上述内容完成，即可使用 http://[your_username].github.io/ 访问页面，将会出现一个和在本地预览时相同的页面。</p>

<p>然后，不要忘了把源文件全部发布到 source 分支下面，再一次可以看不懂，执行以下命令：</p>

<pre><code>git add .
git commit -m "备注内容"
git push origin source
</code></pre>

<h3 id="section-2">4.3 使用自己的域名（可选）</h3>

<p>如果你有自己的域名，并且想指向这个新博客的话，请首先确保执行了 2.4 节中的内容。如果没有执行，可以随时执行。</p>

<p>然后执行下面的命令，注意把 your-domain.com 换成你自己的域名。</p>

<pre><code>echo 'your-domain.com' &gt;&gt; source/CNAME
</code></pre>

<p>然后再次执行以下命令：	</p>

<pre><code>rake generate
rake deploy	
</code></pre>

<p>这样你就可以使用自己的域名了。域名解析需要一段时间，如果没有马上生效，请不要着急。如果长时间没有生效，请确保完整执行了 2.4 节和本节内容。</p>

<h2 id="section-3">5.发布新贴</h2>

<p>博客搭建好了，我们可以开始我们的第一贴了。那么怎么发布新贴呢？如果你真的想像个黑客一样写博客，我们可以继续使用我们的终端 (Terminal) 和命令行，执行以下命令：</p>

<pre><code>cd octopress
rake new_post["Post Title"]
</code></pre>

<p>把其中的 Post Title 替换为你想写的文章标题。然后会有一个名为 yyyy-mm-dd-Post-Title.markdown 的文件在 octopress/source/_posts 目录下生成，其中 yyyy-mm-dd 是你当时的日期。然后执行以下命令：</p>

<pre><code>cd source/_posts/
vim yyyy-mm-dd-Post-Title.markdown
</code></pre>

<p>即可用 vim 编辑器编辑的刚才的文章了，好吧我知道你作为这篇文章的读者并不是一个能熟练使用 vim 的人，那么请在命令行输入 :q退出这个编辑器。如果你不想假装是个黑客的话，其实发布文章并不需要这么麻烦。</p>

<p>我们直接打开 octopress/source/_posts 文件夹，找到刚才生成的文件，用你喜欢的 Markdown 编辑器（免费的我推荐 Mou，收费的我推荐 Byword）或者文本编辑器打开，对文章内容进行编辑。</p>

<p>打开文件后，你会发现文章开头有这么一段信息:</p>

<pre><code>---  
layout: post  
title: "Post Title"  
date: yyyy-mm-dd hh:mm:ss  
comments: true  
categories: ""  
---
</code></pre>

<p>这其实是这篇文章的元数据：layout 暂时不要理会；title 是这篇文章显示在最终网页上的标题；date 部分是详细的文件生成时间，如 2014-04-28 03:35:00；comment 部分表示是否允许评论，目前显示是允许，如果想关闭评论，请改为 false；categories 指这篇文章的分类目录，请在后面引号中输入，如果没有该目录，则会自动生成。请不要删除这段信息，在这段信息下面开始你的文章内容。</p>

<p>这件事情给我们的启发是，以后发布文章，其实并不需要使用终端命令行生成文件。可以直接将自己写好的文章放到这个文件夹下面，当然请按照 yyyy-mm-dd-Post-Title.markdown 这样的文件格式命名，同时记得在文章前面添加元数据信息。这种做法生成的文章与上面的方法无异。如果你觉得添加元数据信息过于麻烦，推荐一个非常好用的工具：<a href="https://smilesoftware.com/TextExpander/index.html">TextExpander</a>。</p>

<p>在文章写好之后，使用命令行执行（仔细观察命令，像不像 generate 和 deploy 的合体？）：</p>

<pre><code>rake gen_deploy
</code></pre>

<p>同样，如果在本节中，任何命令执行失败，没有取得想要结果，请在前面加 sudo。是时候说一说 sudo 命令了，这其实是 super do 的缩写，之所以用它是因为，一般而言 Mac 上最高权限的root 账户默认是关闭的。我们自己的账户哪怕是管理员也在一些地方没有权限操作，super do 其实就是越权操作的意思，因此也往往需要输入密码，一般而言短时间内不需要输入第二次。</p>

<p><strong>出现问题：</strong></p>

<p>rake gen_deploy 后出现：</p>

<pre><code>Errno::ENOENT: No such file or directory @ rb_sysopen - public/_posts/.yyyy-mm-dd-Post-
</code></pre>

<p><strong>解决方案：</strong></p>

<p>修改octopress文件夹下的Rakefile</p>

<pre><code>desc "copy dot files for deployment"
task :copydot, :source, :dest do |t, args|
FileList["#{args.source}/**/.*"].exclude("**/.", "**/..", "**/.DS_Store", "**/._*", "**/.*.sw*”).each do |file|
cp_r file, file.gsub(/#{args.source}/, "#{args.dest}") unless File.directory?(file)
  end
end
</code></pre>

<p><strong>deploy成功，出现新问题：</strong></p>

<pre><code> ! [rejected]        master -&gt; master (non-fast-forward)

error: failed to push some refs to 'https://github.com/yangyangonline/yangyangonline.github.io.git'

hint: Updates were rejected because the tip of your current branch is behind

hint: its remote counterpart. Integrate the remote changes (e.g.

hint: 'git pull ...') before pushing again.

hint: See the 'Note about fast-forwards' in 'git push --help' for details.
</code></pre>

<p><strong>解决方法：</strong></p>

<p>先git pull 再git push可以传上去默认主题的博客页面。(博文奇怪丢失)</p>

<p><strong>出现问题：</strong></p>

<p>博文丢失</p>

<p><strong>解决方法</strong></p>

<p>git config –global push.default matching
git config –global push.default simple</p>

<p>出现新问题
fatal: The upstream branch of your current branch does not match
the name of your current branch.  To push to the upstream branch
on the remote, use</p>

<pre><code>git push origin HEAD:master
</code></pre>

<p>To push to the branch of the same name on the remote, use</p>

<pre><code>git push origin source
</code></pre>

<h5 id="section-4">最终解决方案：</h5>

<p>修改Rakefile</p>

<p>Bundler.with_clean_env { system “git pull” }</p>

<p>改为
Bundler.with_clean_env { system “git pull origin #{deploy_branch}” }</p>

<p>Bundler.with_clean_env { system “git push” }</p>

<p>改为
Bundler.with_clean_env { system “git push origin #{deploy_branch}” }</p>

<p>这样你的第一篇日志就发布出来了，恭喜你正式开通了基于 Octopress 的独立博客。</p>

<p>上传文章，更新云端操作为：</p>

<pre><code>git pull origin source
git push origin source
rake deploy
rake deploy
</code></pre>

<p>每次完成更新都记得把原始文件重新放到 Github 上，还记得命令吧：</p>

<pre><code>git add .
git commit -m "备注内容"
git push origin source
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Post Title]]></title>
    <link href="http://yangyangonline.github.io/blog/post-title.html"/>
    <updated>2014-12-17T18:27:42+08:00</updated>
    <id>http://yangyangonline.github.io/blog/post-title</id>
    <content type="html"><![CDATA[<!--more-->
]]></content>
  </entry>
  
</feed>
